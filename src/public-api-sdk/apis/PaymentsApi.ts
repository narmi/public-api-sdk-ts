/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BillPayDestroy,
  CardsList403Response,
  InvalidRequestError,
  PaginatedBillPaymentList,
  WritePayment,
} from '../models/index';
import {
    BillPayDestroyFromJSON,
    BillPayDestroyToJSON,
    CardsList403ResponseFromJSON,
    CardsList403ResponseToJSON,
    InvalidRequestErrorFromJSON,
    InvalidRequestErrorToJSON,
    PaginatedBillPaymentListFromJSON,
    PaginatedBillPaymentListToJSON,
    WritePaymentFromJSON,
    WritePaymentToJSON,
} from '../models/index';

export interface PaymentsCreateRequest {
    writePayment: Omit<WritePayment, 'id'|'state'|'from_account_id'>;
    format?: PaymentsCreateFormatEnum;
}

export interface PaymentsDestroyRequest {
    id: string;
    format?: PaymentsDestroyFormatEnum;
}

export interface PaymentsListRequest {
    category?: PaymentsListCategoryEnum;
    format?: PaymentsListFormatEnum;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     * Creates a payment for the authenticated user.
     * Create a payment
     */
    async paymentsCreateRaw(requestParameters: PaymentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['writePayment'] == null) {
            throw new runtime.RequiredError(
                'writePayment',
                'Required parameter "writePayment" was null or undefined when calling paymentsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payments/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WritePaymentToJSON(requestParameters['writePayment']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a payment for the authenticated user.
     * Create a payment
     */
    async paymentsCreate(requestParameters: PaymentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.paymentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an authenticated user\'s payment.
     * Delete a payment
     */
    async paymentsDestroyRaw(requestParameters: PaymentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillPayDestroy>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling paymentsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillPayDestroyFromJSON(jsonValue));
    }

    /**
     * Deletes an authenticated user\'s payment.
     * Delete a payment
     */
    async paymentsDestroy(requestParameters: PaymentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillPayDestroy> {
        const response = await this.paymentsDestroyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the authenticated user\'s payments.
     * List payments
     */
    async paymentsListRaw(requestParameters: PaymentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBillPaymentList>> {
        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payments/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBillPaymentListFromJSON(jsonValue));
    }

    /**
     * List the authenticated user\'s payments.
     * List payments
     */
    async paymentsList(requestParameters: PaymentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBillPaymentList> {
        const response = await this.paymentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PaymentsCreateFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PaymentsCreateFormatEnum = typeof PaymentsCreateFormatEnum[keyof typeof PaymentsCreateFormatEnum];
/**
 * @export
 */
export const PaymentsDestroyFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PaymentsDestroyFormatEnum = typeof PaymentsDestroyFormatEnum[keyof typeof PaymentsDestroyFormatEnum];
/**
 * @export
 */
export const PaymentsListCategoryEnum = {
    History: 'history',
    Scheduled: 'scheduled'
} as const;
export type PaymentsListCategoryEnum = typeof PaymentsListCategoryEnum[keyof typeof PaymentsListCategoryEnum];
/**
 * @export
 */
export const PaymentsListFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PaymentsListFormatEnum = typeof PaymentsListFormatEnum[keyof typeof PaymentsListFormatEnum];
