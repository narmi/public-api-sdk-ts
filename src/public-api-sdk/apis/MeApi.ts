/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserResponse,
} from '../models/index';
import {
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models/index';

export interface MeListRequest {
    format?: MeListFormatEnum;
}

/**
 * 
 */
export class MeApi extends runtime.BaseAPI {

    /**
     * List the authenticated users profile information.
     * List authenticated user information
     */
    async meListRaw(requestParameters: MeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * List the authenticated users profile information.
     * List authenticated user information
     */
    async meList(requestParameters: MeListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.meListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MeListFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type MeListFormatEnum = typeof MeListFormatEnum[keyof typeof MeListFormatEnum];
