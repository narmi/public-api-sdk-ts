/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountsNotFoundError,
  InvalidRequestError,
  PatchedTransaction,
  TransactionImagesRetrieve,
  TransactionsResponse,
  TransactionsRetrieve,
  TransactionsUpdate,
} from '../models/index';
import {
    AccountsNotFoundErrorFromJSON,
    AccountsNotFoundErrorToJSON,
    InvalidRequestErrorFromJSON,
    InvalidRequestErrorToJSON,
    PatchedTransactionFromJSON,
    PatchedTransactionToJSON,
    TransactionImagesRetrieveFromJSON,
    TransactionImagesRetrieveToJSON,
    TransactionsResponseFromJSON,
    TransactionsResponseToJSON,
    TransactionsRetrieveFromJSON,
    TransactionsRetrieveToJSON,
    TransactionsUpdateFromJSON,
    TransactionsUpdateToJSON,
} from '../models/index';

export interface TransactionsImagesRetrieveRequest {
    uuid: string;
    format?: TransactionsImagesRetrieveFormatEnum;
}

export interface TransactionsRetrieveRequest {
    uuid: string;
    fileFormat?: TransactionsRetrieveFileFormatEnum;
    format?: TransactionsRetrieveFormatEnum;
}

export interface TransactionsUpdateRequest {
    uuid: string;
    format?: TransactionsUpdateFormatEnum;
    patchedTransaction?: Omit<PatchedTransaction, 'description'|'raw_description'|'id'|'source'|'settled_at'|'created_at'|'account_id'|'category'|'sub_category'|'amount'|'ledger_balance'|'location'|'check'|'merchant'|'metadata'|'type'>;
}

export interface UserTransactionsList2Request {
    after?: string;
    before?: string;
    block?: boolean;
    filter?: UserTransactionsList2FilterEnum;
    format?: UserTransactionsList2FormatEnum;
    page?: number;
    q?: string;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Fetch a specified transaction image.
     * Retrieve transaction image
     */
    async transactionsImagesRetrieveRaw(requestParameters: TransactionsImagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionImagesRetrieve>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling transactionsImagesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/transactions/{uuid}/images/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionImagesRetrieveFromJSON(jsonValue));
    }

    /**
     * Fetch a specified transaction image.
     * Retrieve transaction image
     */
    async transactionsImagesRetrieve(requestParameters: TransactionsImagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionImagesRetrieve> {
        const response = await this.transactionsImagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a specified transaction.
     * Retrieve transaction
     */
    async transactionsRetrieveRaw(requestParameters: TransactionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsRetrieve>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling transactionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/transactions/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsRetrieveFromJSON(jsonValue));
    }

    /**
     * Fetch a specified transaction.
     * Retrieve transaction
     */
    async transactionsRetrieve(requestParameters: TransactionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsRetrieve> {
        const response = await this.transactionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update fields for a specified transaction.
     * Update transaction
     */
    async transactionsUpdateRaw(requestParameters: TransactionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsUpdate>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling transactionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/transactions/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTransactionToJSON(requestParameters['patchedTransaction']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsUpdateFromJSON(jsonValue));
    }

    /**
     * Update fields for a specified transaction.
     * Update transaction
     */
    async transactionsUpdate(requestParameters: TransactionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsUpdate> {
        const response = await this.transactionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List transactions for the authenticated user. Transactions are collated from accounts which the user is a member of.<br /><br />If queried via the <a href=\"#tag/accounts/operation/user_transactions_list\">/v1/accounts/{account_uuids}/transactions</a> endpoint, the call will return a 404 if all the comma-separated list of `account_uuids` are non-existent.<br /><br />Pagination can be defined either via the `before` and `after` query parameters for cursor pagination or via the `page` parameter for page number pagination. Both styles of pagination accept a `per_page` parameter, which indicates how many results should be returned.
     * List user transactions
     */
    async userTransactionsList2Raw(requestParameters: UserTransactionsList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['block'] != null) {
            queryParameters['block'] = requestParameters['block'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/transactions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsResponseFromJSON(jsonValue));
    }

    /**
     * List transactions for the authenticated user. Transactions are collated from accounts which the user is a member of.<br /><br />If queried via the <a href=\"#tag/accounts/operation/user_transactions_list\">/v1/accounts/{account_uuids}/transactions</a> endpoint, the call will return a 404 if all the comma-separated list of `account_uuids` are non-existent.<br /><br />Pagination can be defined either via the `before` and `after` query parameters for cursor pagination or via the `page` parameter for page number pagination. Both styles of pagination accept a `per_page` parameter, which indicates how many results should be returned.
     * List user transactions
     */
    async userTransactionsList2(requestParameters: UserTransactionsList2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionsResponse> {
        const response = await this.userTransactionsList2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TransactionsImagesRetrieveFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type TransactionsImagesRetrieveFormatEnum = typeof TransactionsImagesRetrieveFormatEnum[keyof typeof TransactionsImagesRetrieveFormatEnum];
/**
 * @export
 */
export const TransactionsRetrieveFileFormatEnum = {
    Pdf: 'pdf'
} as const;
export type TransactionsRetrieveFileFormatEnum = typeof TransactionsRetrieveFileFormatEnum[keyof typeof TransactionsRetrieveFileFormatEnum];
/**
 * @export
 */
export const TransactionsRetrieveFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type TransactionsRetrieveFormatEnum = typeof TransactionsRetrieveFormatEnum[keyof typeof TransactionsRetrieveFormatEnum];
/**
 * @export
 */
export const TransactionsUpdateFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type TransactionsUpdateFormatEnum = typeof TransactionsUpdateFormatEnum[keyof typeof TransactionsUpdateFormatEnum];
/**
 * @export
 */
export const UserTransactionsList2FilterEnum = {
    Hidden: 'hidden',
    Unsettled: 'unsettled'
} as const;
export type UserTransactionsList2FilterEnum = typeof UserTransactionsList2FilterEnum[keyof typeof UserTransactionsList2FilterEnum];
/**
 * @export
 */
export const UserTransactionsList2FormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type UserTransactionsList2FormatEnum = typeof UserTransactionsList2FormatEnum[keyof typeof UserTransactionsList2FormatEnum];
