/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BillPayDestroy,
  InvalidRequestError,
  PaginatedBillPayeeList,
  ReadPayee,
  WritePayeeRequest,
} from '../models/index';
import {
    BillPayDestroyFromJSON,
    BillPayDestroyToJSON,
    InvalidRequestErrorFromJSON,
    InvalidRequestErrorToJSON,
    PaginatedBillPayeeListFromJSON,
    PaginatedBillPayeeListToJSON,
    ReadPayeeFromJSON,
    ReadPayeeToJSON,
    WritePayeeRequestFromJSON,
    WritePayeeRequestToJSON,
} from '../models/index';

export interface PayeesCreateRequest {
    writePayeeRequest: WritePayeeRequest;
    format?: PayeesCreateFormatEnum;
}

export interface PayeesDestroyRequest {
    id: string;
    format?: PayeesDestroyFormatEnum;
}

export interface PayeesListRequest {
    format?: PayeesListFormatEnum;
    limit?: number;
    offset?: number;
}

export interface PayeesRetrieveRequest {
    id: string;
    format?: PayeesRetrieveFormatEnum;
}

export interface PayeesUpdateRequest {
    id: string;
    writePayeeRequest: WritePayeeRequest;
    format?: PayeesUpdateFormatEnum;
}

/**
 * 
 */
export class PayeesApi extends runtime.BaseAPI {

    /**
     * Create a payee for a user.
     * Create a payee
     */
    async payeesCreateRaw(requestParameters: PayeesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadPayee>> {
        if (requestParameters['writePayeeRequest'] == null) {
            throw new runtime.RequiredError(
                'writePayeeRequest',
                'Required parameter "writePayeeRequest" was null or undefined when calling payeesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payees/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WritePayeeRequestToJSON(requestParameters['writePayeeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPayeeFromJSON(jsonValue));
    }

    /**
     * Create a payee for a user.
     * Create a payee
     */
    async payeesCreate(requestParameters: PayeesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadPayee> {
        const response = await this.payeesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specified payee.
     * Delete a payee
     */
    async payeesDestroyRaw(requestParameters: PayeesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillPayDestroy>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling payeesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payees/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillPayDestroyFromJSON(jsonValue));
    }

    /**
     * Delete a specified payee.
     * Delete a payee
     */
    async payeesDestroy(requestParameters: PayeesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillPayDestroy> {
        const response = await this.payeesDestroyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List payees for a user.
     * List payees
     */
    async payeesListRaw(requestParameters: PayeesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBillPayeeList>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payees/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBillPayeeListFromJSON(jsonValue));
    }

    /**
     * List payees for a user.
     * List payees
     */
    async payeesList(requestParameters: PayeesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBillPayeeList> {
        const response = await this.payeesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a specified payee.
     * Get a payee
     */
    async payeesRetrieveRaw(requestParameters: PayeesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadPayee>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling payeesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payees/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPayeeFromJSON(jsonValue));
    }

    /**
     * Fetch a specified payee.
     * Get a payee
     */
    async payeesRetrieve(requestParameters: PayeesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadPayee> {
        const response = await this.payeesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update fields for a specified payee.
     * Update a payee
     */
    async payeesUpdateRaw(requestParameters: PayeesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadPayee>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling payeesUpdate().'
            );
        }

        if (requestParameters['writePayeeRequest'] == null) {
            throw new runtime.RequiredError(
                'writePayeeRequest',
                'Required parameter "writePayeeRequest" was null or undefined when calling payeesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payees/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WritePayeeRequestToJSON(requestParameters['writePayeeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPayeeFromJSON(jsonValue));
    }

    /**
     * Update fields for a specified payee.
     * Update a payee
     */
    async payeesUpdate(requestParameters: PayeesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadPayee> {
        const response = await this.payeesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PayeesCreateFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PayeesCreateFormatEnum = typeof PayeesCreateFormatEnum[keyof typeof PayeesCreateFormatEnum];
/**
 * @export
 */
export const PayeesDestroyFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PayeesDestroyFormatEnum = typeof PayeesDestroyFormatEnum[keyof typeof PayeesDestroyFormatEnum];
/**
 * @export
 */
export const PayeesListFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PayeesListFormatEnum = typeof PayeesListFormatEnum[keyof typeof PayeesListFormatEnum];
/**
 * @export
 */
export const PayeesRetrieveFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PayeesRetrieveFormatEnum = typeof PayeesRetrieveFormatEnum[keyof typeof PayeesRetrieveFormatEnum];
/**
 * @export
 */
export const PayeesUpdateFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type PayeesUpdateFormatEnum = typeof PayeesUpdateFormatEnum[keyof typeof PayeesUpdateFormatEnum];
