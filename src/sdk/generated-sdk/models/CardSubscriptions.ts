/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2000.1.5)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CardSubscriptionsRecurrenceFrequency } from './CardSubscriptionsRecurrenceFrequency';
import {
    CardSubscriptionsRecurrenceFrequencyFromJSON,
    CardSubscriptionsRecurrenceFrequencyFromJSONTyped,
    CardSubscriptionsRecurrenceFrequencyToJSON,
} from './CardSubscriptionsRecurrenceFrequency';
import type { CardSubscriptionsStateEnum } from './CardSubscriptionsStateEnum';
import {
    CardSubscriptionsStateEnumFromJSON,
    CardSubscriptionsStateEnumFromJSONTyped,
    CardSubscriptionsStateEnumToJSON,
} from './CardSubscriptionsStateEnum';

/**
 * 
 * @export
 * @interface CardSubscriptions
 */
export interface CardSubscriptions {
    /**
     * 
     * @type {string}
     * @memberof CardSubscriptions
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof CardSubscriptions
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof CardSubscriptions
     */
    categoryCode: string;
    /**
     * 
     * @type {string}
     * @memberof CardSubscriptions
     */
    merchantName: string;
    /**
     * 
     * @type {CardSubscriptionsStateEnum}
     * @memberof CardSubscriptions
     */
    state: CardSubscriptionsStateEnum;
    /**
     * 
     * @type {CardSubscriptionsRecurrenceFrequency}
     * @memberof CardSubscriptions
     */
    recurrenceFrequency: CardSubscriptionsRecurrenceFrequency;
    /**
     * 
     * @type {Date}
     * @memberof CardSubscriptions
     */
    nextPaymentDate: Date | null;
}

/**
 * Check if a given object implements the CardSubscriptions interface.
 */
export function instanceOfCardSubscriptions(value: object): value is CardSubscriptions {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('categoryCode' in value) || value['categoryCode'] === undefined) return false;
    if (!('merchantName' in value) || value['merchantName'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('recurrenceFrequency' in value) || value['recurrenceFrequency'] === undefined) return false;
    if (!('nextPaymentDate' in value) || value['nextPaymentDate'] === undefined) return false;
    return true;
}

export function CardSubscriptionsFromJSON(json: any): CardSubscriptions {
    return CardSubscriptionsFromJSONTyped(json, false);
}

export function CardSubscriptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardSubscriptions {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'amount': json['amount'],
        'categoryCode': json['category_code'],
        'merchantName': json['merchant_name'],
        'state': CardSubscriptionsStateEnumFromJSON(json['state']),
        'recurrenceFrequency': CardSubscriptionsRecurrenceFrequencyFromJSON(json['recurrence_frequency']),
        'nextPaymentDate': (json['next_payment_date'] == null ? null : new Date(json['next_payment_date'])),
    };
}

export function CardSubscriptionsToJSON(value?: CardSubscriptions | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'amount': value['amount'],
        'category_code': value['categoryCode'],
        'merchant_name': value['merchantName'],
        'state': CardSubscriptionsStateEnumToJSON(value['state']),
        'recurrence_frequency': CardSubscriptionsRecurrenceFrequencyToJSON(value['recurrenceFrequency']),
        'next_payment_date': (value['nextPaymentDate'] == null ? null : (value['nextPaymentDate'] as any).toISOString().substring(0,10)),
    };
}

