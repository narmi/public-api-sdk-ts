/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.6.3)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecurringTransactionSubscriptionFrequency } from './RecurringTransactionSubscriptionFrequency';
import {
    RecurringTransactionSubscriptionFrequencyFromJSON,
    RecurringTransactionSubscriptionFrequencyFromJSONTyped,
    RecurringTransactionSubscriptionFrequencyToJSON,
} from './RecurringTransactionSubscriptionFrequency';
import type { SubscriptionStateEnum } from './SubscriptionStateEnum';
import {
    SubscriptionStateEnumFromJSON,
    SubscriptionStateEnumFromJSONTyped,
    SubscriptionStateEnumToJSON,
} from './SubscriptionStateEnum';

/**
 * 
 * @export
 * @interface RecurringTransaction
 */
export interface RecurringTransaction {
    /**
     * 
     * @type {string}
     * @memberof RecurringTransaction
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof RecurringTransaction
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof RecurringTransaction
     */
    categoryCode: string;
    /**
     * 
     * @type {Date}
     * @memberof RecurringTransaction
     */
    transactionDate: Date;
    /**
     * 
     * @type {string}
     * @memberof RecurringTransaction
     */
    merchantName: string;
    /**
     * 
     * @type {SubscriptionStateEnum}
     * @memberof RecurringTransaction
     */
    subscriptionState: SubscriptionStateEnum;
    /**
     * 
     * @type {RecurringTransactionSubscriptionFrequency}
     * @memberof RecurringTransaction
     */
    subscriptionFrequency: RecurringTransactionSubscriptionFrequency;
    /**
     * 
     * @type {Date}
     * @memberof RecurringTransaction
     */
    subscriptionNextPaymentDate: Date | null;
}

/**
 * Check if a given object implements the RecurringTransaction interface.
 */
export function instanceOfRecurringTransaction(value: object): value is RecurringTransaction {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('categoryCode' in value) || value['categoryCode'] === undefined) return false;
    if (!('transactionDate' in value) || value['transactionDate'] === undefined) return false;
    if (!('merchantName' in value) || value['merchantName'] === undefined) return false;
    if (!('subscriptionState' in value) || value['subscriptionState'] === undefined) return false;
    if (!('subscriptionFrequency' in value) || value['subscriptionFrequency'] === undefined) return false;
    if (!('subscriptionNextPaymentDate' in value) || value['subscriptionNextPaymentDate'] === undefined) return false;
    return true;
}

export function RecurringTransactionFromJSON(json: any): RecurringTransaction {
    return RecurringTransactionFromJSONTyped(json, false);
}

export function RecurringTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecurringTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'amount': json['amount'],
        'categoryCode': json['category_code'],
        'transactionDate': (new Date(json['transaction_date'])),
        'merchantName': json['merchant_name'],
        'subscriptionState': SubscriptionStateEnumFromJSON(json['subscription_state']),
        'subscriptionFrequency': RecurringTransactionSubscriptionFrequencyFromJSON(json['subscription_frequency']),
        'subscriptionNextPaymentDate': (json['subscription_next_payment_date'] == null ? null : new Date(json['subscription_next_payment_date'])),
    };
}

export function RecurringTransactionToJSON(value?: RecurringTransaction | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'amount': value['amount'],
        'category_code': value['categoryCode'],
        'transaction_date': ((value['transactionDate']).toISOString().substring(0,10)),
        'merchant_name': value['merchantName'],
        'subscription_state': SubscriptionStateEnumToJSON(value['subscriptionState']),
        'subscription_frequency': RecurringTransactionSubscriptionFrequencyToJSON(value['subscriptionFrequency']),
        'subscription_next_payment_date': (value['subscriptionNextPaymentDate'] == null ? null : (value['subscriptionNextPaymentDate'] as any).toISOString().substring(0,10)),
    };
}

