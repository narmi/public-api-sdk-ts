/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * Document ID. The format of the ID can vary between document stores.
     * @type {string}
     * @memberof Document
     */
    readonly id: string;
    /**
     * Document type, this value can vary between document stores.
     * @type {string}
     * @memberof Document
     */
    readonly type: string | null;
    /**
     * Human readable type, defaults to value of `type` field when missing.
     * @type {string}
     * @memberof Document
     */
    readonly typeLabel: string | null;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    readonly description: string | null;
    /**
     * The date-time the document was posted.
     * @type {string}
     * @memberof Document
     */
    readonly createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    readonly url: string | null;
    /**
     * Binary PDF file data, base64 encoded. This is included when `data` parameter is specified.
     * @type {string}
     * @memberof Document
     */
    data?: string;
}

/**
 * Check if a given object implements the Document interface.
 */
export function instanceOfDocument(value: object): value is Document {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('typeLabel' in value) || value['typeLabel'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function DocumentFromJSON(json: any): Document {
    return DocumentFromJSONTyped(json, false);
}

export function DocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Document {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'typeLabel': json['type_label'],
        'description': json['description'],
        'createdAt': json['created_at'],
        'url': json['url'],
        'data': json['data'] == null ? undefined : json['data'],
    };
}

export function DocumentToJSON(value?: Omit<Document, 'id'|'type'|'type_label'|'description'|'created_at'|'url'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'data': value['data'],
    };
}

