/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { OrgRoleEnum } from './OrgRoleEnum';
import {
    OrgRoleEnumFromJSON,
    OrgRoleEnumFromJSONTyped,
    OrgRoleEnumToJSON,
} from './OrgRoleEnum';
import type { BusinessPermissionsField } from './BusinessPermissionsField';
import {
    BusinessPermissionsFieldFromJSON,
    BusinessPermissionsFieldFromJSONTyped,
    BusinessPermissionsFieldToJSON,
} from './BusinessPermissionsField';
import type { Phone } from './Phone';
import {
    PhoneFromJSON,
    PhoneFromJSONTyped,
    PhoneToJSON,
} from './Phone';
import type { FeatureField } from './FeatureField';
import {
    FeatureFieldFromJSON,
    FeatureFieldFromJSONTyped,
    FeatureFieldToJSON,
} from './FeatureField';
import type { UserCategory52fEnum } from './UserCategory52fEnum';
import {
    UserCategory52fEnumFromJSON,
    UserCategory52fEnumFromJSONTyped,
    UserCategory52fEnumToJSON,
} from './UserCategory52fEnum';

/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * Email address for the registered user.
     * @type {string}
     * @memberof Profile
     */
    readonly email: string;
    /**
     * Email address the user has registered to the core.
     * @type {string}
     * @memberof Profile
     */
    readonly coreProvidedEmail: string;
    /**
     * Username for the registered user.
     * @type {string}
     * @memberof Profile
     */
    readonly username: string;
    /**
     * UUID of the registered user. This value is used as the unique identifier for the user in the API.
     * @type {string}
     * @memberof Profile
     */
    readonly id: string;
    /**
     * Core user ID, may be set to empty string if the requesting user does not have the `core_user_id` scope for the target user.
     * @type {string}
     * @memberof Profile
     */
    readonly institutionUserIdentifier: string;
    /**
     * The last date-time that the information for this user was altered or saved.
     * @type {Date}
     * @memberof Profile
     */
    readonly updatedAt: Date;
    /**
     * A list of addresses for the registered user. This list contains the primary address and the mailing address of the user, if it exists. This may be set to empty list if the requesting user does not have the `address` scope for the target user.
     * @type {Array<Address>}
     * @memberof Profile
     */
    readonly addresses: Array<Address>;
    /**
     * A list of phone numbers for the registered user. This list often includes only one phone number. This may be set to empty list if the requesting user does not have the `phone` scope for the target user.
     * @type {Array<Phone>}
     * @memberof Profile
     */
    readonly phoneNumbers: Array<Phone>;
    /**
     * First name of the registered user, can also include middle or second names. This may be set to empty string if the requesting user does not have the `name` scope for the target user.
     * @type {string}
     * @memberof Profile
     */
    readonly firstName: string;
    /**
     * Last name of the registered user, may include items such as hyphenated/multiple surnames and generational suffixes (ie. Jr, Sr, III). This may be set to empty string if the requesting user does not have the `name` scope for the target user.
     * @type {string}
     * @memberof Profile
     */
    readonly lastName: string;
    /**
     * Whether the registered user has opted to receive eStatements. This may be set to `null` if the requesting user does not have the `preferences` scope for the target user.
     * @type {boolean}
     * @memberof Profile
     */
    readonly paperStatements: boolean;
    /**
     * Used to distinguish whether this is a `business` or `personal` user.
     * @type {UserCategory52fEnum}
     * @memberof Profile
     */
    readonly userCategory: UserCategory52fEnum;
    /**
     * A set of user features which define what the user can and can not do.
     * @type {FeatureField}
     * @memberof Profile
     */
    readonly features: FeatureField;
    /**
     * The UUID of the organization which the user belongs to. This will be set to `null` if the user category is set to `personal`.
     * @type {string}
     * @memberof Profile
     */
    readonly orgUuid: string;
    /**
     * The role of the user for the organization it belongs to. This will be set to `null` if the user category is set to `personal`.
     * @type {OrgRoleEnum}
     * @memberof Profile
     */
    readonly orgRole: OrgRoleEnum;
    /**
     * Name of the organization the user belongs to. This will be the DBA (Doing Business As) name if it exists, otherwise it will be set to the organization's legal name.
     * @type {string}
     * @memberof Profile
     */
    readonly orgName: string;
    /**
     * Permissions that a user has to a business. The permissions which are granted are dictated by the users role in the organization. This will be set to an empty list for non-business users.
     * @type {Array<BusinessPermissionsField>}
     * @memberof Profile
     */
    readonly businessPermissions: Array<BusinessPermissionsField>;
    /**
     * For business users, this field indicates whether transactions initiated by the user require approval from the organization. For non-business users this will always be set to `false`.
     * @type {boolean}
     * @memberof Profile
     */
    readonly dualApprovalRequired: boolean;
    /**
     * Indicates whether the registered user is an employee of the financial institution.
     * @type {boolean}
     * @memberof Profile
     */
    readonly isStaff: boolean;
    /**
     * Indicates whether the user has been disabled.
     * @type {boolean}
     * @memberof Profile
     */
    readonly isActive: boolean;
    /**
     * Indicates whether the user is an admin.
     * @type {boolean}
     * @memberof Profile
     */
    readonly isSuperuser: boolean;
    /**
     * Indicates whether the user is a Narmi user.
     * @type {boolean}
     * @memberof Profile
     */
    readonly isNarmi: boolean;
    /**
     * The date-time the user was enrolled in the Narmi system.
     * @type {Date}
     * @memberof Profile
     */
    readonly dateJoined: Date;
    /**
     * The date-time the user last logged in.
     * @type {Date}
     * @memberof Profile
     */
    readonly lastLogin: Date;
    /**
     * The banking segment which the user is a member of. These values can be unique for different financial institutions.
     * @type {string}
     * @memberof Profile
     */
    readonly segment: string;
    /**
     * Metadata for the registered user, this is often set as an empty object `{}`.
     * @type {{ [key: string]: any; }}
     * @memberof Profile
     */
    readonly metadata: { [key: string]: any; };
    /**
     * Whether the username was defined by the user or was autogenerated by the system.
     * @type {boolean}
     * @memberof Profile
     */
    readonly hasUsername: boolean;
    /**
     * Whether the password was set by the user.
     * @type {boolean}
     * @memberof Profile
     */
    readonly hasPassword: boolean;
    /**
     * Whether the user has accepted the latest terms of service.
     * @type {boolean}
     * @memberof Profile
     */
    readonly hasAcceptedLatestTerms: boolean;
    /**
     * Whether the user has verified their account. This can prevent the user from logging in. Enrollment can be completed via `/v1/enroll_verify/`.
     * @type {boolean}
     * @memberof Profile
     */
    readonly requiresEnrollmentCodeVerification: boolean;
    /**
     * Date-time the user opted into electronic statements.
     * @type {Date}
     * @memberof Profile
     */
    readonly enabledEstatementsAt: Date;
    /**
     * Whether the user is in the process of enrolling into online banking.
     * @type {boolean}
     * @memberof Profile
     */
    readonly isConverting: boolean;
    /**
     * When 2FA is enabled for the FI, this field indicates whether the user has a device which they can use to authenticate to the system.
     * @type {boolean}
     * @memberof Profile
     */
    readonly hasPermittedDevice: boolean;
    /**
     * Whether the registered user has a one-time password backup code for two-factor authentication.
     * @type {boolean}
     * @memberof Profile
     */
    readonly hasBackupCodes: boolean;
}

/**
 * Check if a given object implements the Profile interface.
 */
export function instanceOfProfile(value: object): value is Profile {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('coreProvidedEmail' in value) || value['coreProvidedEmail'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('institutionUserIdentifier' in value) || value['institutionUserIdentifier'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('addresses' in value) || value['addresses'] === undefined) return false;
    if (!('phoneNumbers' in value) || value['phoneNumbers'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('paperStatements' in value) || value['paperStatements'] === undefined) return false;
    if (!('userCategory' in value) || value['userCategory'] === undefined) return false;
    if (!('features' in value) || value['features'] === undefined) return false;
    if (!('orgUuid' in value) || value['orgUuid'] === undefined) return false;
    if (!('orgRole' in value) || value['orgRole'] === undefined) return false;
    if (!('orgName' in value) || value['orgName'] === undefined) return false;
    if (!('businessPermissions' in value) || value['businessPermissions'] === undefined) return false;
    if (!('dualApprovalRequired' in value) || value['dualApprovalRequired'] === undefined) return false;
    if (!('isStaff' in value) || value['isStaff'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('isSuperuser' in value) || value['isSuperuser'] === undefined) return false;
    if (!('isNarmi' in value) || value['isNarmi'] === undefined) return false;
    if (!('dateJoined' in value) || value['dateJoined'] === undefined) return false;
    if (!('lastLogin' in value) || value['lastLogin'] === undefined) return false;
    if (!('segment' in value) || value['segment'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    if (!('hasUsername' in value) || value['hasUsername'] === undefined) return false;
    if (!('hasPassword' in value) || value['hasPassword'] === undefined) return false;
    if (!('hasAcceptedLatestTerms' in value) || value['hasAcceptedLatestTerms'] === undefined) return false;
    if (!('requiresEnrollmentCodeVerification' in value) || value['requiresEnrollmentCodeVerification'] === undefined) return false;
    if (!('enabledEstatementsAt' in value) || value['enabledEstatementsAt'] === undefined) return false;
    if (!('isConverting' in value) || value['isConverting'] === undefined) return false;
    if (!('hasPermittedDevice' in value) || value['hasPermittedDevice'] === undefined) return false;
    if (!('hasBackupCodes' in value) || value['hasBackupCodes'] === undefined) return false;
    return true;
}

export function ProfileFromJSON(json: any): Profile {
    return ProfileFromJSONTyped(json, false);
}

export function ProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): Profile {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'coreProvidedEmail': json['core_provided_email'],
        'username': json['username'],
        'id': json['id'],
        'institutionUserIdentifier': json['institution_user_identifier'],
        'updatedAt': (new Date(json['updated_at'])),
        'addresses': ((json['addresses'] as Array<any>).map(AddressFromJSON)),
        'phoneNumbers': ((json['phone_numbers'] as Array<any>).map(PhoneFromJSON)),
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'paperStatements': json['paper_statements'],
        'userCategory': UserCategory52fEnumFromJSON(json['user_category']),
        'features': FeatureFieldFromJSON(json['features']),
        'orgUuid': json['org_uuid'],
        'orgRole': OrgRoleEnumFromJSON(json['org_role']),
        'orgName': json['org_name'],
        'businessPermissions': ((json['business_permissions'] as Array<any>).map(BusinessPermissionsFieldFromJSON)),
        'dualApprovalRequired': json['dual_approval_required'],
        'isStaff': json['is_staff'],
        'isActive': json['is_active'],
        'isSuperuser': json['is_superuser'],
        'isNarmi': json['is_narmi'],
        'dateJoined': (new Date(json['date_joined'])),
        'lastLogin': (new Date(json['last_login'])),
        'segment': json['segment'],
        'metadata': json['metadata'],
        'hasUsername': json['has_username'],
        'hasPassword': json['has_password'],
        'hasAcceptedLatestTerms': json['has_accepted_latest_terms'],
        'requiresEnrollmentCodeVerification': json['requires_enrollment_code_verification'],
        'enabledEstatementsAt': (new Date(json['enabled_estatements_at'])),
        'isConverting': json['is_converting'],
        'hasPermittedDevice': json['has_permitted_device'],
        'hasBackupCodes': json['has_backup_codes'],
    };
}

export function ProfileToJSON(value?: Omit<Profile, 'email'|'core_provided_email'|'username'|'id'|'institution_user_identifier'|'updated_at'|'addresses'|'phone_numbers'|'first_name'|'last_name'|'paper_statements'|'user_category'|'features'|'org_uuid'|'org_role'|'org_name'|'business_permissions'|'dual_approval_required'|'is_staff'|'is_active'|'is_superuser'|'is_narmi'|'date_joined'|'last_login'|'segment'|'metadata'|'has_username'|'has_password'|'has_accepted_latest_terms'|'requires_enrollment_code_verification'|'enabled_estatements_at'|'is_converting'|'has_permitted_device'|'has_backup_codes'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
    };
}

