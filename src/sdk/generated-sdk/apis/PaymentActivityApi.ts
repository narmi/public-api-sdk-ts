/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2000.1.5)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedPaymentActivityList,
} from '../models/index';
import {
    PaginatedPaymentActivityListFromJSON,
    PaginatedPaymentActivityListToJSON,
} from '../models/index';

export interface PaymentActivityListRequest {
    amountDollarsGte?: number;
    amountDollarsLte?: number;
    description?: string;
    descriptionContains?: string;
    institutionAccountIn?: Array<string>;
    page?: number;
    parent?: string;
    parentModel?: PaymentActivityListParentModelEnum;
    rrule?: string;
    rruleContains?: string;
    scheduledDateAfter?: Date;
    scheduledDateBefore?: Date;
}

/**
 * 
 */
export class PaymentActivityApi extends runtime.BaseAPI {

    /**
     * Read-only informational endpoint about payments    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve payment activity
     */
    async paymentActivityListRaw(requestParameters: PaymentActivityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPaymentActivityList>> {
        const queryParameters: any = {};

        if (requestParameters['amountDollarsGte'] != null) {
            queryParameters['amount_dollars_gte'] = requestParameters['amountDollarsGte'];
        }

        if (requestParameters['amountDollarsLte'] != null) {
            queryParameters['amount_dollars_lte'] = requestParameters['amountDollarsLte'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['descriptionContains'] != null) {
            queryParameters['description_contains'] = requestParameters['descriptionContains'];
        }

        if (requestParameters['institutionAccountIn'] != null) {
            queryParameters['institution_account_in'] = requestParameters['institutionAccountIn']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        if (requestParameters['parentModel'] != null) {
            queryParameters['parent_model'] = requestParameters['parentModel'];
        }

        if (requestParameters['rrule'] != null) {
            queryParameters['rrule'] = requestParameters['rrule'];
        }

        if (requestParameters['rruleContains'] != null) {
            queryParameters['rrule_contains'] = requestParameters['rruleContains'];
        }

        if (requestParameters['scheduledDateAfter'] != null) {
            queryParameters['scheduled_date_after'] = (requestParameters['scheduledDateAfter'] as any).toISOString();
        }

        if (requestParameters['scheduledDateBefore'] != null) {
            queryParameters['scheduled_date_before'] = (requestParameters['scheduledDateBefore'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/payment_activity/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPaymentActivityListFromJSON(jsonValue));
    }

    /**
     * Read-only informational endpoint about payments    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve payment activity
     */
    async paymentActivityList(requestParameters: PaymentActivityListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPaymentActivityList> {
        const response = await this.paymentActivityListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PaymentActivityListParentModelEnum = {
    UnverifiedAchTransfer: 'UnverifiedACHTransfer'
} as const;
export type PaymentActivityListParentModelEnum = typeof PaymentActivityListParentModelEnum[keyof typeof PaymentActivityListParentModelEnum];
