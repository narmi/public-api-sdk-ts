/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.6.173)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountAlertRule,
  AccountAlertRuleRequest,
  AccountsDocumentsRetrieve404Response,
  AchDetailsCreate400Response,
  PaginatedAccountAlertRuleList,
} from '../models/index';
import {
    AccountAlertRuleFromJSON,
    AccountAlertRuleToJSON,
    AccountAlertRuleRequestFromJSON,
    AccountAlertRuleRequestToJSON,
    AccountsDocumentsRetrieve404ResponseFromJSON,
    AccountsDocumentsRetrieve404ResponseToJSON,
    AchDetailsCreate400ResponseFromJSON,
    AchDetailsCreate400ResponseToJSON,
    PaginatedAccountAlertRuleListFromJSON,
    PaginatedAccountAlertRuleListToJSON,
} from '../models/index';

export interface AccountAlertCreateRequest {
    accountAlertRuleRequest: AccountAlertRuleRequest;
}

export interface AccountAlertDeleteRequest {
    uuid: string;
}

export interface AccountAlertListRequest {
    page?: number;
}

export interface AccountAlertRetrieveRequest {
    uuid: string;
}

export interface AccountAlertUpdateRequest {
    uuid: string;
    accountAlertRuleRequest: AccountAlertRuleRequest;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Activates an account alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create an account alert
     */
    async accountAlertCreateRaw(requestParameters: AccountAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountAlertRule>> {
        if (requestParameters['accountAlertRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'accountAlertRuleRequest',
                'Required parameter "accountAlertRuleRequest" was null or undefined when calling accountAlertCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountAlertRuleRequestToJSON(requestParameters['accountAlertRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountAlertRuleFromJSON(jsonValue));
    }

    /**
     * Activates an account alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create an account alert
     */
    async accountAlertCreate(requestParameters: AccountAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountAlertRule> {
        const response = await this.accountAlertCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivates an account alert for the user. The `alert_key` field determines which alert to deactivate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Delete an account alert
     */
    async accountAlertDeleteRaw(requestParameters: AccountAlertDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling accountAlertDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deactivates an account alert for the user. The `alert_key` field determines which alert to deactivate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Delete an account alert
     */
    async accountAlertDelete(requestParameters: AccountAlertDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountAlertDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List all active account alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List account alerts
     */
    async accountAlertListRaw(requestParameters: AccountAlertListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAccountAlertRuleList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAccountAlertRuleListFromJSON(jsonValue));
    }

    /**
     * List all active account alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List account alerts
     */
    async accountAlertList(requestParameters: AccountAlertListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAccountAlertRuleList> {
        const response = await this.accountAlertListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an account alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve an account alert
     */
    async accountAlertRetrieveRaw(requestParameters: AccountAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountAlertRule>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling accountAlertRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountAlertRuleFromJSON(jsonValue));
    }

    /**
     * Retrieves an account alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve an account alert
     */
    async accountAlertRetrieve(requestParameters: AccountAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountAlertRule> {
        const response = await this.accountAlertRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an account alert\'s metadata for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Update an account alert
     */
    async accountAlertUpdateRaw(requestParameters: AccountAlertUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountAlertRule>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling accountAlertUpdate().'
            );
        }

        if (requestParameters['accountAlertRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'accountAlertRuleRequest',
                'Required parameter "accountAlertRuleRequest" was null or undefined when calling accountAlertUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountAlertRuleRequestToJSON(requestParameters['accountAlertRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountAlertRuleFromJSON(jsonValue));
    }

    /**
     * Updates an account alert\'s metadata for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Update an account alert
     */
    async accountAlertUpdate(requestParameters: AccountAlertUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountAlertRule> {
        const response = await this.accountAlertUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
