/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.6.18)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountsDocumentsRetrieve404Response,
  AchDetailsCreate400Response,
  LoanAlertRule,
  LoanAlertRuleRequest,
  PaginatedLoanAlertRuleList,
} from '../models/index';
import {
    AccountsDocumentsRetrieve404ResponseFromJSON,
    AccountsDocumentsRetrieve404ResponseToJSON,
    AchDetailsCreate400ResponseFromJSON,
    AchDetailsCreate400ResponseToJSON,
    LoanAlertRuleFromJSON,
    LoanAlertRuleToJSON,
    LoanAlertRuleRequestFromJSON,
    LoanAlertRuleRequestToJSON,
    PaginatedLoanAlertRuleListFromJSON,
    PaginatedLoanAlertRuleListToJSON,
} from '../models/index';

export interface LoanAlertCreateRequest {
    loanAlertRuleRequest: LoanAlertRuleRequest;
}

export interface LoanAlertDeleteRequest {
    uuid: string;
}

export interface LoanAlertListRequest {
    page?: number;
}

export interface LoanAlertRetrieveRequest {
    uuid: string;
}

export interface LoanAlertUpdateRequest {
    uuid: string;
    loanAlertRuleRequest: LoanAlertRuleRequest;
}

/**
 * 
 */
export class LoanApi extends runtime.BaseAPI {

    /**
     * Activates a loan alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a loan alert
     */
    async loanAlertCreateRaw(requestParameters: LoanAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanAlertRule>> {
        if (requestParameters['loanAlertRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'loanAlertRuleRequest',
                'Required parameter "loanAlertRuleRequest" was null or undefined when calling loanAlertCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoanAlertRuleRequestToJSON(requestParameters['loanAlertRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanAlertRuleFromJSON(jsonValue));
    }

    /**
     * Activates a loan alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a loan alert
     */
    async loanAlertCreate(requestParameters: LoanAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanAlertRule> {
        const response = await this.loanAlertCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivates a loan alert for the user. The `alert_key` field determines which alert to deactivate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Delete a loan alert
     */
    async loanAlertDeleteRaw(requestParameters: LoanAlertDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling loanAlertDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deactivates a loan alert for the user. The `alert_key` field determines which alert to deactivate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Delete a loan alert
     */
    async loanAlertDelete(requestParameters: LoanAlertDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loanAlertDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List all active loan alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List loan alerts
     */
    async loanAlertListRaw(requestParameters: LoanAlertListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLoanAlertRuleList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLoanAlertRuleListFromJSON(jsonValue));
    }

    /**
     * List all active loan alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List loan alerts
     */
    async loanAlertList(requestParameters: LoanAlertListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLoanAlertRuleList> {
        const response = await this.loanAlertListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a loan alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a loan alert
     */
    async loanAlertRetrieveRaw(requestParameters: LoanAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanAlertRule>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling loanAlertRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanAlertRuleFromJSON(jsonValue));
    }

    /**
     * Retrieves a loan alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a loan alert
     */
    async loanAlertRetrieve(requestParameters: LoanAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanAlertRule> {
        const response = await this.loanAlertRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a loan alert\'s metadata for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Update a loan alert
     */
    async loanAlertUpdateRaw(requestParameters: LoanAlertUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanAlertRule>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling loanAlertUpdate().'
            );
        }

        if (requestParameters['loanAlertRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'loanAlertRuleRequest',
                'Required parameter "loanAlertRuleRequest" was null or undefined when calling loanAlertUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LoanAlertRuleRequestToJSON(requestParameters['loanAlertRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanAlertRuleFromJSON(jsonValue));
    }

    /**
     * Updates a loan alert\'s metadata for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Update a loan alert
     */
    async loanAlertUpdate(requestParameters: LoanAlertUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanAlertRule> {
        const response = await this.loanAlertUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
