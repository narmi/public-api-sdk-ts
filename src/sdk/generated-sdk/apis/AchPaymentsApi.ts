/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.5.29)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ACHPayment,
  ACHPaymentRequest,
  AchPaymentsCreate409Response,
  GeneralError,
  PaginatedACHPaymentList,
  PaginatedScheduledUnverifiedACHTransferList,
  ScheduledUnverifiedACHTransfer,
  ScheduledUnverifiedACHTransferRequest,
} from '../models/index';
import {
    ACHPaymentFromJSON,
    ACHPaymentToJSON,
    ACHPaymentRequestFromJSON,
    ACHPaymentRequestToJSON,
    AchPaymentsCreate409ResponseFromJSON,
    AchPaymentsCreate409ResponseToJSON,
    GeneralErrorFromJSON,
    GeneralErrorToJSON,
    PaginatedACHPaymentListFromJSON,
    PaginatedACHPaymentListToJSON,
    PaginatedScheduledUnverifiedACHTransferListFromJSON,
    PaginatedScheduledUnverifiedACHTransferListToJSON,
    ScheduledUnverifiedACHTransferFromJSON,
    ScheduledUnverifiedACHTransferToJSON,
    ScheduledUnverifiedACHTransferRequestFromJSON,
    ScheduledUnverifiedACHTransferRequestToJSON,
} from '../models/index';

export interface AchPaymentsCreateRequest {
    aCHPaymentRequest: ACHPaymentRequest;
}

export interface AchPaymentsListRequest {
    page?: number;
}

export interface AchPaymentsScheduledCreateRequest {
    scheduledUnverifiedACHTransferRequest: ScheduledUnverifiedACHTransferRequest;
}

export interface AchPaymentsScheduledDestroyRequest {
    uuid: string;
}

export interface AchPaymentsScheduledListRequest {
    page?: number;
}

export interface AchPaymentsScheduledRetrieveRequest {
    uuid: string;
}

/**
 * 
 */
export class AchPaymentsApi extends runtime.BaseAPI {

    /**
     * Send an ACH Payment using an existing recipient and set of external account details (i.e. account number, routing number, account type, account purpose).    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Send an ACH Payment
     */
    async achPaymentsCreateRaw(requestParameters: AchPaymentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ACHPayment>> {
        if (requestParameters['aCHPaymentRequest'] == null) {
            throw new runtime.RequiredError(
                'aCHPaymentRequest',
                'Required parameter "aCHPaymentRequest" was null or undefined when calling achPaymentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ach_payments/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ACHPaymentRequestToJSON(requestParameters['aCHPaymentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ACHPaymentFromJSON(jsonValue));
    }

    /**
     * Send an ACH Payment using an existing recipient and set of external account details (i.e. account number, routing number, account type, account purpose).    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Send an ACH Payment
     */
    async achPaymentsCreate(requestParameters: AchPaymentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ACHPayment> {
        const response = await this.achPaymentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async achPaymentsListRaw(requestParameters: AchPaymentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedACHPaymentList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ach_payments/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedACHPaymentListFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async achPaymentsList(requestParameters: AchPaymentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedACHPaymentList> {
        const response = await this.achPaymentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a scheduled ACH payment
     */
    async achPaymentsScheduledCreateRaw(requestParameters: AchPaymentsScheduledCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduledUnverifiedACHTransfer>> {
        if (requestParameters['scheduledUnverifiedACHTransferRequest'] == null) {
            throw new runtime.RequiredError(
                'scheduledUnverifiedACHTransferRequest',
                'Required parameter "scheduledUnverifiedACHTransferRequest" was null or undefined when calling achPaymentsScheduledCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ach_payments/scheduled/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduledUnverifiedACHTransferRequestToJSON(requestParameters['scheduledUnverifiedACHTransferRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledUnverifiedACHTransferFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a scheduled ACH payment
     */
    async achPaymentsScheduledCreate(requestParameters: AchPaymentsScheduledCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduledUnverifiedACHTransfer> {
        const response = await this.achPaymentsScheduledCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Destroy a scheduled ACH payment
     */
    async achPaymentsScheduledDestroyRaw(requestParameters: AchPaymentsScheduledDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling achPaymentsScheduledDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ach_payments/scheduled/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Destroy a scheduled ACH payment
     */
    async achPaymentsScheduledDestroy(requestParameters: AchPaymentsScheduledDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.achPaymentsScheduledDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List a scheduled ACH payment
     */
    async achPaymentsScheduledListRaw(requestParameters: AchPaymentsScheduledListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedScheduledUnverifiedACHTransferList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ach_payments/scheduled/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedScheduledUnverifiedACHTransferListFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List a scheduled ACH payment
     */
    async achPaymentsScheduledList(requestParameters: AchPaymentsScheduledListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedScheduledUnverifiedACHTransferList> {
        const response = await this.achPaymentsScheduledListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a scheduled ACH payment
     */
    async achPaymentsScheduledRetrieveRaw(requestParameters: AchPaymentsScheduledRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduledUnverifiedACHTransfer>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling achPaymentsScheduledRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/ach_payments/scheduled/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledUnverifiedACHTransferFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a scheduled ACH payment
     */
    async achPaymentsScheduledRetrieve(requestParameters: AchPaymentsScheduledRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduledUnverifiedACHTransfer> {
        const response = await this.achPaymentsScheduledRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
