/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.5.222)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BankingAccessToken,
  BankingAccessTokenCreate,
  BankingAccessTokenCreateRequest,
  BankingAccessTokenRequest,
  PaginatedBankingAccessTokenList,
  PatchedBankingAccessTokenRequest,
} from '../models/index';
import {
    BankingAccessTokenFromJSON,
    BankingAccessTokenToJSON,
    BankingAccessTokenCreateFromJSON,
    BankingAccessTokenCreateToJSON,
    BankingAccessTokenCreateRequestFromJSON,
    BankingAccessTokenCreateRequestToJSON,
    BankingAccessTokenRequestFromJSON,
    BankingAccessTokenRequestToJSON,
    PaginatedBankingAccessTokenListFromJSON,
    PaginatedBankingAccessTokenListToJSON,
    PatchedBankingAccessTokenRequestFromJSON,
    PatchedBankingAccessTokenRequestToJSON,
} from '../models/index';

export interface BankingTokensCreateRequest {
    bankingAccessTokenCreateRequest: BankingAccessTokenCreateRequest;
}

export interface BankingTokensDestroyRequest {
    uuid: string;
}

export interface BankingTokensListRequest {
    page?: number;
}

export interface BankingTokensPartialUpdateRequest {
    uuid: string;
    patchedBankingAccessTokenRequest?: PatchedBankingAccessTokenRequest;
}

export interface BankingTokensRetrieveRequest {
    uuid: string;
}

export interface BankingTokensUpdateRequest {
    uuid: string;
    bankingAccessTokenRequest: BankingAccessTokenRequest;
}

/**
 * 
 */
export class TokensApi extends runtime.BaseAPI {

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensCreateRaw(requestParameters: BankingTokensCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankingAccessTokenCreate>> {
        if (requestParameters['bankingAccessTokenCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'bankingAccessTokenCreateRequest',
                'Required parameter "bankingAccessTokenCreateRequest" was null or undefined when calling bankingTokensCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/banking/tokens/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankingAccessTokenCreateRequestToJSON(requestParameters['bankingAccessTokenCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankingAccessTokenCreateFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensCreate(requestParameters: BankingTokensCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankingAccessTokenCreate> {
        const response = await this.bankingTokensCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensDestroyRaw(requestParameters: BankingTokensDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling bankingTokensDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/banking/tokens/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensDestroy(requestParameters: BankingTokensDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bankingTokensDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensListRaw(requestParameters: BankingTokensListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBankingAccessTokenList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/banking/tokens/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBankingAccessTokenListFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensList(requestParameters: BankingTokensListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBankingAccessTokenList> {
        const response = await this.bankingTokensListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensPartialUpdateRaw(requestParameters: BankingTokensPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankingAccessToken>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling bankingTokensPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/banking/tokens/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedBankingAccessTokenRequestToJSON(requestParameters['patchedBankingAccessTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankingAccessTokenFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensPartialUpdate(requestParameters: BankingTokensPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankingAccessToken> {
        const response = await this.bankingTokensPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensRetrieveRaw(requestParameters: BankingTokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankingAccessToken>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling bankingTokensRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/banking/tokens/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankingAccessTokenFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensRetrieve(requestParameters: BankingTokensRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankingAccessToken> {
        const response = await this.bankingTokensRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensUpdateRaw(requestParameters: BankingTokensUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankingAccessToken>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling bankingTokensUpdate().'
            );
        }

        if (requestParameters['bankingAccessTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'bankingAccessTokenRequest',
                'Required parameter "bankingAccessTokenRequest" was null or undefined when calling bankingTokensUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/banking/tokens/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BankingAccessTokenRequestToJSON(requestParameters['bankingAccessTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankingAccessTokenFromJSON(jsonValue));
    }

    /**
     * <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     */
    async bankingTokensUpdate(requestParameters: BankingTokensUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankingAccessToken> {
        const response = await this.bankingTokensUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
