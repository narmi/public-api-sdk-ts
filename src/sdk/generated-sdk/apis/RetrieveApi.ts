/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.4.169)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountAlertRule,
  AccountsDocumentsRetrieve404Response,
  LoanAlertRule,
  TransactionAlertRule,
} from '../models/index';
import {
    AccountAlertRuleFromJSON,
    AccountAlertRuleToJSON,
    AccountsDocumentsRetrieve404ResponseFromJSON,
    AccountsDocumentsRetrieve404ResponseToJSON,
    LoanAlertRuleFromJSON,
    LoanAlertRuleToJSON,
    TransactionAlertRuleFromJSON,
    TransactionAlertRuleToJSON,
} from '../models/index';

export interface AccountAlertRetrieveRequest {
    uuid: string;
}

export interface LoanAlertRetrieveRequest {
    uuid: string;
}

export interface TransactionAlertRetrieveRequest {
    uuid: string;
}

/**
 * 
 */
export class RetrieveApi extends runtime.BaseAPI {

    /**
     * Retrieves an account alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve an account alert
     */
    async accountAlertRetrieveRaw(requestParameters: AccountAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountAlertRule>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling accountAlertRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountAlertRuleFromJSON(jsonValue));
    }

    /**
     * Retrieves an account alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve an account alert
     */
    async accountAlertRetrieve(requestParameters: AccountAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountAlertRule> {
        const response = await this.accountAlertRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a loan alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a loan alert
     */
    async loanAlertRetrieveRaw(requestParameters: LoanAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanAlertRule>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling loanAlertRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanAlertRuleFromJSON(jsonValue));
    }

    /**
     * Retrieves a loan alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a loan alert
     */
    async loanAlertRetrieve(requestParameters: LoanAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanAlertRule> {
        const response = await this.loanAlertRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a transaction alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a transaction alert
     */
    async transactionAlertRetrieveRaw(requestParameters: TransactionAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionAlertRule>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling transactionAlertRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/transaction/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionAlertRuleFromJSON(jsonValue));
    }

    /**
     * Retrieves a transaction alert for the user    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve a transaction alert
     */
    async transactionAlertRetrieve(requestParameters: TransactionAlertRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionAlertRule> {
        const response = await this.transactionAlertRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
