/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.4.133)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountAlertRule,
  AccountAlertRuleRequest,
  AccountsDocumentsRetrieve404Response,
  AchDetailsCreate400Response,
  LoanAlertRule,
  LoanAlertRuleRequest,
  TransactionAlertRule,
  TransactionAlertRuleRequest,
} from '../models/index';
import {
    AccountAlertRuleFromJSON,
    AccountAlertRuleToJSON,
    AccountAlertRuleRequestFromJSON,
    AccountAlertRuleRequestToJSON,
    AccountsDocumentsRetrieve404ResponseFromJSON,
    AccountsDocumentsRetrieve404ResponseToJSON,
    AchDetailsCreate400ResponseFromJSON,
    AchDetailsCreate400ResponseToJSON,
    LoanAlertRuleFromJSON,
    LoanAlertRuleToJSON,
    LoanAlertRuleRequestFromJSON,
    LoanAlertRuleRequestToJSON,
    TransactionAlertRuleFromJSON,
    TransactionAlertRuleToJSON,
    TransactionAlertRuleRequestFromJSON,
    TransactionAlertRuleRequestToJSON,
} from '../models/index';

export interface AccountAlertCreateRequest {
    accountAlertRuleRequest: AccountAlertRuleRequest;
}

export interface LoanAlertCreateRequest {
    loanAlertRuleRequest: LoanAlertRuleRequest;
}

export interface TransactionAlertCreateRequest {
    transactionAlertRuleRequest: TransactionAlertRuleRequest;
}

/**
 * 
 */
export class CreateApi extends runtime.BaseAPI {

    /**
     * Activates an account alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create an account alert
     */
    async accountAlertCreateRaw(requestParameters: AccountAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountAlertRule>> {
        if (requestParameters['accountAlertRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'accountAlertRuleRequest',
                'Required parameter "accountAlertRuleRequest" was null or undefined when calling accountAlertCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountAlertRuleRequestToJSON(requestParameters['accountAlertRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountAlertRuleFromJSON(jsonValue));
    }

    /**
     * Activates an account alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create an account alert
     */
    async accountAlertCreate(requestParameters: AccountAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountAlertRule> {
        const response = await this.accountAlertCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Activates a loan alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a loan alert
     */
    async loanAlertCreateRaw(requestParameters: LoanAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoanAlertRule>> {
        if (requestParameters['loanAlertRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'loanAlertRuleRequest',
                'Required parameter "loanAlertRuleRequest" was null or undefined when calling loanAlertCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoanAlertRuleRequestToJSON(requestParameters['loanAlertRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoanAlertRuleFromJSON(jsonValue));
    }

    /**
     * Activates a loan alert for the user. The `alert_key` field determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a loan alert
     */
    async loanAlertCreate(requestParameters: LoanAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoanAlertRule> {
        const response = await this.loanAlertCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Activates a transaction alert for the user. The `alert_key` determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a transaction alert
     */
    async transactionAlertCreateRaw(requestParameters: TransactionAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionAlertRule>> {
        if (requestParameters['transactionAlertRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'transactionAlertRuleRequest',
                'Required parameter "transactionAlertRuleRequest" was null or undefined when calling transactionAlertCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/transaction/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionAlertRuleRequestToJSON(requestParameters['transactionAlertRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionAlertRuleFromJSON(jsonValue));
    }

    /**
     * Activates a transaction alert for the user. The `alert_key` determines which alert to activate for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Create a transaction alert
     */
    async transactionAlertCreate(requestParameters: TransactionAlertCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionAlertRule> {
        const response = await this.transactionAlertCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
