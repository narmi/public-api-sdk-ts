/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.4.98)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedAccountAlertRuleList,
  PaginatedLoanAlertRuleList,
  PaginatedTransactionAlertRuleList,
} from '../models/index';
import {
    PaginatedAccountAlertRuleListFromJSON,
    PaginatedAccountAlertRuleListToJSON,
    PaginatedLoanAlertRuleListFromJSON,
    PaginatedLoanAlertRuleListToJSON,
    PaginatedTransactionAlertRuleListFromJSON,
    PaginatedTransactionAlertRuleListToJSON,
} from '../models/index';

export interface AccountAlertListRequest {
    page?: number;
}

export interface LoanAlertListRequest {
    page?: number;
}

export interface TransactionAlertListRequest {
    page?: number;
}

/**
 * 
 */
export class ListApi extends runtime.BaseAPI {

    /**
     * List all active account alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List account alerts
     */
    async accountAlertListRaw(requestParameters: AccountAlertListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAccountAlertRuleList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/account/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAccountAlertRuleListFromJSON(jsonValue));
    }

    /**
     * List all active account alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List account alerts
     */
    async accountAlertList(requestParameters: AccountAlertListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAccountAlertRuleList> {
        const response = await this.accountAlertListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all active loan alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List loan alerts
     */
    async loanAlertListRaw(requestParameters: LoanAlertListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLoanAlertRuleList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/loan/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLoanAlertRuleListFromJSON(jsonValue));
    }

    /**
     * List all active loan alerts for the user.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List loan alerts
     */
    async loanAlertList(requestParameters: LoanAlertListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLoanAlertRuleList> {
        const response = await this.loanAlertListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all active transaction alerts for the user.     <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List transaction alerts
     */
    async transactionAlertListRaw(requestParameters: TransactionAlertListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTransactionAlertRuleList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/alerts/transaction/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTransactionAlertRuleListFromJSON(jsonValue));
    }

    /**
     * List all active transaction alerts for the user.     <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * List transaction alerts
     */
    async transactionAlertList(requestParameters: TransactionAlertListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTransactionAlertRuleList> {
        const response = await this.transactionAlertListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
