/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountBalance,
  AccountBalances,
  NotFoundError,
} from '../models/index';
import {
    AccountBalanceFromJSON,
    AccountBalanceToJSON,
    AccountBalancesFromJSON,
    AccountBalancesToJSON,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
} from '../models/index';

export interface AccountBalancesListRequest {
    format?: AccountBalancesListFormatEnum;
}

export interface AccountBalancesRetrieveRequest {
    uuid: string;
    format?: AccountBalancesRetrieveFormatEnum;
}

/**
 * 
 */
export class AccountBalancesApi extends runtime.BaseAPI {

    /**
     * List the authenticated user\'s account balances for each account. A caller may use this endpoint in order to update the balance totals for an account who\'s data has already been fetched.   A full set of account data can be queried via <a href=\"#tag/accounts\">accounts section</a>.
     * List account balances
     */
    async accountBalancesListRaw(requestParameters: AccountBalancesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountBalances>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/account_balances/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountBalancesFromJSON(jsonValue));
    }

    /**
     * List the authenticated user\'s account balances for each account. A caller may use this endpoint in order to update the balance totals for an account who\'s data has already been fetched.   A full set of account data can be queried via <a href=\"#tag/accounts\">accounts section</a>.
     * List account balances
     */
    async accountBalancesList(requestParameters: AccountBalancesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountBalances> {
        const response = await this.accountBalancesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the balances for an account as specified by its uuid. A caller may use this endpoint in order to update the balance totals for an account who\'s data has already been fetched.   A full set of account data can be queried via <a href=\"#tag/accounts\">accounts section</a>.
     * Retrieve account balances for an account
     */
    async accountBalancesRetrieveRaw(requestParameters: AccountBalancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountBalance>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling accountBalancesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/account_balances/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountBalanceFromJSON(jsonValue));
    }

    /**
     * Fetch the balances for an account as specified by its uuid. A caller may use this endpoint in order to update the balance totals for an account who\'s data has already been fetched.   A full set of account data can be queried via <a href=\"#tag/accounts\">accounts section</a>.
     * Retrieve account balances for an account
     */
    async accountBalancesRetrieve(requestParameters: AccountBalancesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountBalance> {
        const response = await this.accountBalancesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AccountBalancesListFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type AccountBalancesListFormatEnum = typeof AccountBalancesListFormatEnum[keyof typeof AccountBalancesListFormatEnum];
/**
 * @export
 */
export const AccountBalancesRetrieveFormatEnum = {
    Html: 'html',
    Json: 'json'
} as const;
export type AccountBalancesRetrieveFormatEnum = typeof AccountBalancesRetrieveFormatEnum[keyof typeof AccountBalancesRetrieveFormatEnum];
