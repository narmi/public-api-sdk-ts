/* tslint:disable */
/* eslint-disable */
/**
 * Narmi Public API
 * To read about Public API access and authentication, go to [API Overview](https://docs.narmi.com/docs/narmi-developer-docs/xl9dvbz84o11l-introduction).
 *
 * The version of the OpenAPI document: v1 (v2025.6.4)
 * Contact: support@narmi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FedNowEligibility,
  FednowPayment,
  InstantTransfersFee,
} from '../models/index';
import {
    FedNowEligibilityFromJSON,
    FedNowEligibilityToJSON,
    FednowPaymentFromJSON,
    FednowPaymentToJSON,
    InstantTransfersFeeFromJSON,
    InstantTransfersFeeToJSON,
} from '../models/index';

export interface TransfersInstantEligibilityRetrieveRequest {
    routingNumber: string;
}

export interface TransfersInstantRetrieveRequest {
    paymentIdentification: string;
}

/**
 * 
 */
export class InstantTransfersApi extends runtime.BaseAPI {

    /**
     * Check if the provided routing number is enrolled and active in the FedNow network    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Check eligibility for instant transfers
     */
    async transfersInstantEligibilityRetrieveRaw(requestParameters: TransfersInstantEligibilityRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FedNowEligibility>> {
        if (requestParameters['routingNumber'] == null) {
            throw new runtime.RequiredError(
                'routingNumber',
                'Required parameter "routingNumber" was null or undefined when calling transfersInstantEligibilityRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/transfers/instant/eligibility/{routing_number}/`.replace(`{${"routing_number"}}`, encodeURIComponent(String(requestParameters['routingNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FedNowEligibilityFromJSON(jsonValue));
    }

    /**
     * Check if the provided routing number is enrolled and active in the FedNow network    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Check eligibility for instant transfers
     */
    async transfersInstantEligibilityRetrieve(requestParameters: TransfersInstantEligibilityRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FedNowEligibility> {
        const response = await this.transfersInstantEligibilityRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the fee structure for instant transfers to calculate the fee for any transfer.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve fee information for instant transfers
     */
    async transfersInstantFeesRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstantTransfersFee>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/transfers/instant/fees/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstantTransfersFeeFromJSON(jsonValue));
    }

    /**
     * Returns the fee structure for instant transfers to calculate the fee for any transfer.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve fee information for instant transfers
     */
    async transfersInstantFeesRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstantTransfersFee> {
        const response = await this.transfersInstantFeesRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the details and status for an instant transfer. This is only supported for payments that have been assigned a payment ID.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve instant transfer details by payment identification
     */
    async transfersInstantRetrieveRaw(requestParameters: TransfersInstantRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FednowPayment>> {
        if (requestParameters['paymentIdentification'] == null) {
            throw new runtime.RequiredError(
                'paymentIdentification',
                'Required parameter "paymentIdentification" was null or undefined when calling transfersInstantRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("OAuth2", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/transfers/instant/{payment_identification}/`.replace(`{${"payment_identification"}}`, encodeURIComponent(String(requestParameters['paymentIdentification']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FednowPaymentFromJSON(jsonValue));
    }

    /**
     * Retrieve the details and status for an instant transfer. This is only supported for payments that have been assigned a payment ID.    <i>How can we improve these docs?             <a href=\"mailto:docs+feedback@narmi.com\">Share your feedback.</a></i>
     * Retrieve instant transfer details by payment identification
     */
    async transfersInstantRetrieve(requestParameters: TransfersInstantRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FednowPayment> {
        const response = await this.transfersInstantRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
